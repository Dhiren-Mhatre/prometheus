package io_prometheus_client

import (
	"io"
	"testing"

	"github.com/gogo/protobuf/proto"
	"github.com/stretchr/testify/require"

	"github.com/prometheus/prometheus/model/labels"
)

func TestMetricStreamingDecoder(t *testing.T) {
	const testGauge = `name: "go_build_info"
help: "Build information about the main Go module."
type: GAUGE
metric: <
  label: <
    name: "checksum"
    value: ""
  >
  label: <
    name: "path"
    value: "github.com/prometheus/client_golang"
  >
  label: <
    name: "version"
    value: "(devel)"
  >
  gauge: <
    value: 1
  >
>
metric: <
  label: <
    name: "checksum"
    value: ""
  >
  label: <
    name: "path"
    value: "github.com/prometheus/prometheus"
  >
  label: <
    name: "version"
    value: "v3.0.0"
  >
  gauge: <
    value: 2
  >
>

`
	var protoBuf []byte
	{
		mf := &MetricFamily{}
		require.NoError(t, proto.UnmarshalText(testGauge, mf))
		// From proto message to binary protobuf.
		var err error
		protoBuf, err = proto.Marshal(mf)
		require.NoError(t, err)
	}

	d, err := NewMetricStreamingDecoder(protoBuf, nil)
	require.NoError(t, err)

	require.Equal(t, "go_build_info", d.GetName())
	require.Equal(t, "Build information about the main Go module.", d.GetHelp())
	require.Equal(t, MetricType_GAUGE, d.GetType())

	var firstMetricLset labels.Labels
	var firstMetricBytes []byte
	{
		require.NoError(t, d.NextMetric())
		m := d.GetMetric()

		require.Equal(t, float64(1), m.Metric.GetGauge().GetValue())
		require.Equal(t, []byte{0xa, 0xa, 0xa, 0x8, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0xa, 0x2b, 0xa, 0x4, 0x70, 0x61, 0x74, 0x68, 0x12, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0xa, 0x12, 0xa, 0x7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7, 0x28, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x12, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x3f}, m.MetricBytes())
		b := labels.NewScratchBuilder(0)
		require.NoError(t, m.Label(&b))

		firstMetricLset = b.Labels()
		firstMetricBytes = m.MetricBytes()

		require.Equal(t, `{checksum="", path="github.com/prometheus/client_golang", version="(devel)"}`, firstMetricLset.String())
	}
	{
		require.NoError(t, d.NextMetric())
		m := d.GetMetric()

		require.Equal(t, float64(2), m.Metric.GetGauge().GetValue())
		require.Equal(t, []byte{0xa, 0xa, 0xa, 0x8, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0xa, 0x28, 0xa, 0x4, 0x70, 0x61, 0x74, 0x68, 0x12, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0xa, 0x11, 0xa, 0x7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6, 0x76, 0x33, 0x2e, 0x30, 0x2e, 0x30, 0x12, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40}, m.MetricBytes())
		b := labels.NewScratchBuilder(0)
		require.NoError(t, m.Label(&b))
		require.Equal(t, `{checksum="", path="github.com/prometheus/prometheus", version="v3.0.0"}`, b.Labels().String())
	}

	require.Equal(t, io.EOF, d.NextMetric())

	// Expect labels and metricBytes to be static and reusable even after parsing.
	require.Equal(t, []byte{0xa, 0xa, 0xa, 0x8, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0xa, 0x2b, 0xa, 0x4, 0x70, 0x61, 0x74, 0x68, 0x12, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0xa, 0x12, 0xa, 0x7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7, 0x28, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x12, 0x9, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x3f}, firstMetricBytes)
	require.Equal(t, `{checksum="", path="github.com/prometheus/client_golang", version="(devel)"}`, firstMetricLset.String())
}
